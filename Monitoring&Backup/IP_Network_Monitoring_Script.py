'''
Python script to monitor IP address on the same network and output number of packets in a output
file for further/later analysis.
'''
import re
import os

# Run tcpdump command (assuming it's on the system)
def capture_network_traffic(ip):
    os.system(f"sudo tcpdump -v host {ip} -c 50 > output.txt")  # Modify count (-c 50) 50 packets default

# Parse the output file generated by tcpdump
def parse_tcpdump_output(file_name):
    # Define regex patterns to match timestamps, IPs, and flags
    timestamp_pattern = r"\d{2}:\d{2}:\d{2}\.\d{6}"
    ip_pattern = r"(\d{1,3}\.){3}\d{1,3}"
    flags_pattern = r"Flags \[([^\]]+)\]"

    # Read the tcpdump output from the file
    with open(file_name, "r") as file:
        lines = file.readlines()

    # Create and open a new file to save the parsed output
    with open("parsed_output.txt", "w") as parsed_file:
        for line in lines:
            timestamp = re.search(timestamp_pattern, line)
            ip_addresses = re.findall(ip_pattern, line)
            flags = re.search(flags_pattern, line)

            if timestamp and ip_addresses and flags:
                # Extract source and destination IPs
                src_ip = ip_addresses[0] if len(ip_addresses) > 0 else "N/A"
                dest_ip = ip_addresses[1] if len(ip_addresses) > 1 else "N/A"
                
                # Format the parsed information
                parsed_data = f"Timestamp: {timestamp.group()} | Source IP: {src_ip} | Destination IP: {dest_ip} | Flags: {flags.group(1)}\n"
                
                # Write parsed data to the output file
                parsed_file.write(parsed_data)

    print("Parsed output saved to parsed_output.txt")

# Main script execution
if __name__ == "__main__":
    ip_address = input("Enter the IP address to monitor: ")
    
    # Step 1: Capture traffic using tcpdump
    print(f"Capturing network traffic for IP: {ip_address}...")
    capture_network_traffic(ip_address)

    # Step 2: Parse the captured output file
    print("Parsing the captured tcpdump output...")
    parse_tcpdump_output("output.txt") # Change to output file of choice

    print("Task completed.")
